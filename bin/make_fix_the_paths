#!/bin/bash
#which cc 1>/dev/null 2>/dev/null || exit 1
cd $TMPDIR/bin || exit 1
[[ -x $TMPDIR/bin/r.fix_the_paths ]] && exit 0
cat <<"EOT" >r.fix_the_paths.c
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <dirent.h>


static  char **eliminate=NULL;
static  int n_eliminate=0;

print_usage(char *name)
{
   fprintf(stderr,"USAGE: %s [-v|--verbose] -pat1 -pat2 ... -patn [+supp1a[+supp1b[+supp1c]]] item1 [+supp2] item2 ... [+suppn] itemn \n",name);
   fprintf(stderr,"       pat1..patn simple patterns to eliminate\n");
   fprintf(stderr,"       supp1..suppn if item/supp is a directory, add it in front of item\n");
   fprintf(stderr,"       item = EnvName \n");
   fprintf(stderr,"       EnvName is the name of an environment variable containing a path\n");
   fprintf(stderr,"ex:    %s PATH MANPATH EC_LD_LIBRARY_PATH\n",name);
   fprintf(stderr,"       %s +$BASE_ARCH PATH MANPATH +$EC_ARCH EC_LD_LIBRARY_PATH\n",name);
   fprintf(stderr,"       %s LD_LIBRARY_PATH +$EC_ARCH EC_INCLUDE_PATH\n",name);
   fprintf(stderr,"ex:    %s -/a/b/ -machin/patente PATH MANPATH EC_LD_LIBRARY_PATH\n",name);
}

int is_dir_element(char *base, char *element)
{
  DIR *dirfd;
  struct dirent *my_dirent;
  struct stat stat_buf;
  int found = 0;
  char full_path[2048];

  if(  dirfd = opendir(base) ){
    snprintf(full_path,2047,"%s/%s",base,element);       /* build fullpath */
    while( (my_dirent = readdir(dirfd)) != NULL ) {
      if (0 == strcmp(my_dirent->d_name,element) ) {
        if ( 0 == stat(full_path,&stat_buf) ) {          /* name match, stat it */
          found = S_ISDIR(stat_buf.st_mode) ;            /* must be a directory */
        }
      }
      if(found) break;
    }
    closedir(dirfd);
  }
  return found;
}

int is_a_dir(char *base_path, char *extra)   /* is this a directory ? */
{
  char extra_path[1024];
  char full_base[2048];
  int base_length;
  char *subdirs[8];
  int i, j, found;
  char *pname;
  DIR *dirfd;
  struct dirent *my_dirent;

  if(*extra == '\0') return 0;

  strncpy(extra_path,extra,1023);

  for(i=0 ; i<8 ; i++) subdirs[i] = "";   /* break extra_path into constituent subdirectories */
  pname = extra_path;
  i = 0;
  subdirs[i] = pname;
  while(*pname != '\0') {
    if(*pname == '/') {
      *pname = '\0';
      subdirs[++i] = pname + 1;
    }
    pname++;
  }

  strncpy(full_base,base_path,2047);
  base_length = strlen(full_base);
  found = 0;
  for (j=0 ; j<=i ; j++){       /* check one level at a time */
    char *temp = subdirs[j];
    if (*temp == '\0') break;
    found = is_dir_element(full_base,temp);
    if(found == 0) return found;
    snprintf(full_base+base_length,2047-base_length,"/%s",temp);
    base_length = strlen(full_base);
  }
  return found;
}

int is_duplicate(char *what, char **table, int nentries)  /* a non existent directory is treated like a duplicate */
{
  int i;
  struct stat stat_buf;

  for(i=0;i<n_eliminate;i++) { if ( strstr(what,1+eliminate[i]) ) return 1; } /* if found in list to eliminate, treat as duplicate */
  for(i=0;i<nentries;i++){
    if(table[i] != NULL) {
      if(strcmp(what,table[i]) == 0) return 1;
    }
  }
  if ( 0 != stat(what,&stat_buf) ) return 1 ;  /* does not exist */
  if( S_ISDIR(stat_buf.st_mode) )  return 0 ;  /* it is a directory */
  return 1;
}

#define MAXAUG 8
main(int argc, char **argv)
{
  char *progname;
  char *env_var;
  char *supplement;
  char augment[1024];
  char *augptr[MAXAUG];   /* list of pointers to paths augmentations */
  int found[MAXAUG];
  char *sub_path[1204];
  char extra_path[1204];
  char env_value[32768];
  int nsubpath;
  int i, j;
  char separator=':';
  char *temp;
  char *TMPDIR=getenv("TMPDIR");
  char tmpdir_bin[1024];
  char *HOME=getenv("HOME");
  char ovbin[1024];
  int len_ovbin;
  char *varname;
  struct stat stat_buf;
  int verbose=0;
  DIR *dirfd;
  struct dirent *my_dirent;
  int augmentable;

  progname=argv[0];
  if(argc < 2 ) { print_usage(argv[0]) ; exit(1); }

  if(strcmp( "-h",argv[1])==0 || strcmp("--help",argv[1])==0 ) { print_usage(argv[0]) ; exit(1); }
  argc-- ; argv++;
  if(strcmp( "-v",*argv)==0 || strcmp( "--verbose",*argv)==0 ) {verbose=1 ; argc-- ; argv++; }
  if(**argv == '-') {
    eliminate=argv;
    while(argc > 0 && **argv == '-') { n_eliminate++ ; argc-- ; argv++ ; }
  }

  tmpdir_bin[0]='\0';  /* tempdir/bin, top override */
  if(TMPDIR != NULL) snprintf(tmpdir_bin,1023,"%s/bin%c",TMPDIR,'\0'); tmpdir_bin[1023]='\0';

  ovbin[0]='\0';  /* base of ovbin directories, ~/ovbin */
  if(HOME   != NULL) snprintf(ovbin     ,1023,"%s/ovbin%c",HOME,'\0'); ovbin[1023]='\0';
  len_ovbin=strlen(ovbin);

  supplement="";
  augment[0] = '\0';
  for(i=0;i<MAXAUG;i++) augptr[i]=NULL;
  while(argc--){                /* loop over cEnvName arguments */
    varname=argv[0];
    if( *varname == '+' ) {     /* +dir1[+dir2][+dir3]... path augmentations */
      supplement=varname+1;
      strncpy(augment,supplement,sizeof(augment));
      augment[sizeof(augment)-1] = '\0';
      augptr[0] = &augment[0];
      i = 0;
      temp = &augment[0];
      while( *temp != '\0' ) { 
        if (*temp == '+' ) { 
          *temp = '\0' ;
          if(temp[1] != '+') augptr[++i] = temp+1 ;  /* ignore multiple consecutive + */
        }
        temp++ ;
        if( i == MAXAUG-1 ) break ;
      }
      while( i<MAXAUG ) augptr[++i] = NULL;
      argv++;
      continue;
    }
    if( isalnum(*varname) || *varname=='_' ) {
      separator = '\0';
    }else{
      separator = *varname++;
    }
    env_var=getenv(varname);    /* get value of environment variable */
    if(env_var != NULL){        /* make sure it exists */
      strncpy(env_value,env_var,32767); env_value[32767]='\0';  /* take a copy */
      temp=env_value;
      if(separator == '\0') {
        while(*temp != '\0' && *temp != ':' &&  *temp != ' ' && *temp != ';') temp++;  /* find separator, one of blank , colon, semicolon */
        separator=*temp;
      }
      temp=env_value;
      if(separator == '\0') separator = ':' ;
      while( *temp == separator && *temp != '\0') temp++;       /* get rid of leading separators */

      nsubpath=1;
      sub_path[0]=temp;

      while(1){                                                 /* split path into separate entries */
        while( *temp != separator && *temp != '\0') temp++;     /* skip to next separator */
        if(*temp == '\0') break;                                /* OOPS end */
        *temp='\0'; temp++;
        if(is_duplicate(sub_path[nsubpath-1],sub_path,nsubpath-1)) /* duplicate entry in path ? */
          nsubpath--;
        while( *temp == separator && *temp != '\0') temp++;     /* skip all consecutive separators */
        if(*temp == '\0') break;                                /* OOPS end */
        sub_path[nsubpath++]=temp;
      }
      if(nsubpath < 1) goto try_next;                            /* nothing was found */
      if(is_duplicate(sub_path[nsubpath-1],sub_path,nsubpath-1)) /* is last entry in path a duplicate ? */
        nsubpath--;
      if(nsubpath < 1) goto try_next;                            /* nothing was found */

      fprintf(stdout,"%s='",varname);                            /* variable_name= */

      for(i=0 ; i<nsubpath ; i++){
         if(0 == strcmp(sub_path[i],tmpdir_bin) ){               /* $TMPDIR/bin ? */
           fprintf(stdout,"%s%c",sub_path[i],separator);
           sub_path[i]=NULL;                                     /* yes, suppress entry */
         }
      }
      while(sub_path[nsubpath-1] == NULL) nsubpath--;            /* suppress NULLs at tail of list */
      for(i=0 ; i<nsubpath ; i++){
         if(sub_path[i] == NULL) continue;
         if(0 == strncmp(sub_path[i],ovbin,len_ovbin) ){         /* $HOME/ovbin... ? */
           fprintf(stdout,"%s%c",sub_path[i],separator);
           sub_path[i]=NULL;                                     /* yes, suppress entry */
         }
      }
      while(sub_path[nsubpath-1] == NULL) nsubpath--;            /* suppress NULLs at tail of list */
      for(i=0 ; i<nsubpath ; i++) {                              /* output non override values */
        augmentable = 1;
        if(sub_path[i] != NULL) {
          temp = sub_path[i] ;
          augmentable = strncmp("/usr/",temp,5) * strncmp("/opt",temp,4) * 
                        strncmp("/bin",temp,4)  * strncmp("/etc",temp,4) *
                        strncmp("/sbin",temp,5);
          if( *supplement != '\0' && augmentable ) {
            for(j=0 ; j<MAXAUG ; j++) found[j] = 0;
            for(j=0 ; j<MAXAUG ; j++) {
              if(augptr[j] != NULL) {
                snprintf(extra_path,1023,"%s/%s",sub_path[i],augptr[j]);
                found[j] = is_a_dir(sub_path[i],augptr[j]);
              }
            }
            for(j=0 ; j<MAXAUG ; j++) {
              if(augptr[j] != NULL) {
                char *tempo = augptr[j];
                int ltempo = strlen(tempo)-1;
                if(tempo[ltempo] == '/') tempo[ltempo] = '\0';   /* get rid of a trailing / */
                if(found[j]) { fprintf(stdout,"%s/%s%c",sub_path[i],augptr[j],separator); }
                else { if(verbose) fprintf(stderr,"directory '%s/%s' does not exist\n",sub_path[i],augptr[j]); }
              }
            }
          }else{   /* path is not augmentable or there is no augmentation request */
            if(verbose && *supplement != '\0') fprintf(stderr,"no lookup for '%s'\n",temp);
          }
          if( i == nsubpath-1 )
            fprintf(stdout,"%s'\n",sub_path[i]);
          else
            fprintf(stdout,"%s%c",sub_path[i],separator);
        }
      }
    }else{   /* specified path environment variable does notexist, do nothing */
      if(verbose) fprintf(stderr,"%s: ERROR environment variable %s not found\n",progname,*argv);
    }
try_next:
    if(nsubpath == 0) {
      if(verbose) fprintf(stderr,"%s: ERROR no valid directory found in path variable %s\n",progname,*argv);
    }
    supplement="";
    augment[0] = '\0';
    for(i=0;i<MAXAUG;i++) augptr[i]=NULL;
    argv++;
  }
}
EOT
#cc r.fix_the_paths.c -o r.fix_the_paths
make r.fix_the_paths
rm -f r.fix_the_paths.c
